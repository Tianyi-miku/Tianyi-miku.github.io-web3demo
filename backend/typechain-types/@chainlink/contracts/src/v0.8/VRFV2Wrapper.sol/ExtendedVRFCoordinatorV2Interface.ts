/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface ExtendedVRFCoordinatorV2InterfaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptSubscriptionOwnerTransfer"
      | "addConsumer"
      | "cancelSubscription"
      | "createSubscription"
      | "getConfig"
      | "getFallbackWeiPerUnitLink"
      | "getFeeConfig"
      | "getRequestConfig"
      | "getSubscription"
      | "pendingRequestExists"
      | "removeConsumer"
      | "requestRandomWords"
      | "requestSubscriptionOwnerTransfer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addConsumer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFallbackWeiPerUnitLink",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRequestExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeConsumer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomWords",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSubscriptionOwnerTransfer",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackWeiPerUnitLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRequestExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
}

export interface ExtendedVRFCoordinatorV2Interface extends BaseContract {
  connect(runner?: ContractRunner | null): ExtendedVRFCoordinatorV2Interface;
  waitForDeployment(): Promise<this>;

  interface: ExtendedVRFCoordinatorV2InterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptSubscriptionOwnerTransfer: TypedContractMethod<
    [subId: BigNumberish],
    [void],
    "nonpayable"
  >;

  addConsumer: TypedContractMethod<
    [subId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;

  cancelSubscription: TypedContractMethod<
    [subId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  createSubscription: TypedContractMethod<[], [bigint], "nonpayable">;

  getConfig: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        minimumRequestConfirmations: bigint;
        maxGasLimit: bigint;
        stalenessSeconds: bigint;
        gasAfterPaymentCalculation: bigint;
      }
    ],
    "view"
  >;

  getFallbackWeiPerUnitLink: TypedContractMethod<[], [bigint], "view">;

  getFeeConfig: TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        fulfillmentFlatFeeLinkPPMTier1: bigint;
        fulfillmentFlatFeeLinkPPMTier2: bigint;
        fulfillmentFlatFeeLinkPPMTier3: bigint;
        fulfillmentFlatFeeLinkPPMTier4: bigint;
        fulfillmentFlatFeeLinkPPMTier5: bigint;
        reqsForTier2: bigint;
        reqsForTier3: bigint;
        reqsForTier4: bigint;
        reqsForTier5: bigint;
      }
    ],
    "view"
  >;

  getRequestConfig: TypedContractMethod<
    [],
    [[bigint, bigint, string[]]],
    "view"
  >;

  getSubscription: TypedContractMethod<
    [subId: BigNumberish],
    [
      [bigint, bigint, string, string[]] & {
        balance: bigint;
        reqCount: bigint;
        owner: string;
        consumers: string[];
      }
    ],
    "view"
  >;

  pendingRequestExists: TypedContractMethod<
    [subId: BigNumberish],
    [boolean],
    "view"
  >;

  removeConsumer: TypedContractMethod<
    [subId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;

  requestRandomWords: TypedContractMethod<
    [
      keyHash: BytesLike,
      subId: BigNumberish,
      minimumRequestConfirmations: BigNumberish,
      callbackGasLimit: BigNumberish,
      numWords: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  requestSubscriptionOwnerTransfer: TypedContractMethod<
    [subId: BigNumberish, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptSubscriptionOwnerTransfer"
  ): TypedContractMethod<[subId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addConsumer"
  ): TypedContractMethod<
    [subId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelSubscription"
  ): TypedContractMethod<
    [subId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSubscription"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        minimumRequestConfirmations: bigint;
        maxGasLimit: bigint;
        stalenessSeconds: bigint;
        gasAfterPaymentCalculation: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFallbackWeiPerUnitLink"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFeeConfig"
  ): TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        fulfillmentFlatFeeLinkPPMTier1: bigint;
        fulfillmentFlatFeeLinkPPMTier2: bigint;
        fulfillmentFlatFeeLinkPPMTier3: bigint;
        fulfillmentFlatFeeLinkPPMTier4: bigint;
        fulfillmentFlatFeeLinkPPMTier5: bigint;
        reqsForTier2: bigint;
        reqsForTier3: bigint;
        reqsForTier4: bigint;
        reqsForTier5: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRequestConfig"
  ): TypedContractMethod<[], [[bigint, bigint, string[]]], "view">;
  getFunction(
    nameOrSignature: "getSubscription"
  ): TypedContractMethod<
    [subId: BigNumberish],
    [
      [bigint, bigint, string, string[]] & {
        balance: bigint;
        reqCount: bigint;
        owner: string;
        consumers: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingRequestExists"
  ): TypedContractMethod<[subId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeConsumer"
  ): TypedContractMethod<
    [subId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestRandomWords"
  ): TypedContractMethod<
    [
      keyHash: BytesLike,
      subId: BigNumberish,
      minimumRequestConfirmations: BigNumberish,
      callbackGasLimit: BigNumberish,
      numWords: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestSubscriptionOwnerTransfer"
  ): TypedContractMethod<
    [subId: BigNumberish, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
