/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface VRFV2WrapperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COORDINATOR"
      | "LINK"
      | "LINK_ETH_FEED"
      | "SUBSCRIPTION_ID"
      | "acceptOwnership"
      | "calculateRequestPrice"
      | "disable"
      | "enable"
      | "estimateRequestPrice"
      | "getConfig"
      | "lastRequestId"
      | "onTokenTransfer"
      | "owner"
      | "rawFulfillRandomWords"
      | "s_callbacks"
      | "s_configured"
      | "s_disabled"
      | "setConfig"
      | "transferOwnership"
      | "typeAndVersion"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "WrapperFulfillmentFailed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "COORDINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LINK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LINK_ETH_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBSCRIPTION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequestPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "disable", values?: undefined): string;
  encodeFunctionData(functionFragment: "enable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "estimateRequestPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "s_callbacks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "s_configured",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_disabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "typeAndVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "COORDINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LINK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LINK_ETH_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBSCRIPTION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateRequestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_callbacks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_configured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_disabled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typeAndVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrapperFulfillmentFailedEvent {
  export type InputTuple = [requestId: BigNumberish, consumer: AddressLike];
  export type OutputTuple = [requestId: bigint, consumer: string];
  export interface OutputObject {
    requestId: bigint;
    consumer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VRFV2Wrapper extends BaseContract {
  connect(runner?: ContractRunner | null): VRFV2Wrapper;
  waitForDeployment(): Promise<this>;

  interface: VRFV2WrapperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COORDINATOR: TypedContractMethod<[], [string], "view">;

  LINK: TypedContractMethod<[], [string], "view">;

  LINK_ETH_FEED: TypedContractMethod<[], [string], "view">;

  SUBSCRIPTION_ID: TypedContractMethod<[], [bigint], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  calculateRequestPrice: TypedContractMethod<
    [_callbackGasLimit: BigNumberish],
    [bigint],
    "view"
  >;

  disable: TypedContractMethod<[], [void], "nonpayable">;

  enable: TypedContractMethod<[], [void], "nonpayable">;

  estimateRequestPrice: TypedContractMethod<
    [_callbackGasLimit: BigNumberish, _requestGasPriceWei: BigNumberish],
    [bigint],
    "view"
  >;

  getConfig: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, string, bigint] & {
        fallbackWeiPerUnitLink: bigint;
        stalenessSeconds: bigint;
        fulfillmentFlatFeeLinkPPM: bigint;
        wrapperGasOverhead: bigint;
        coordinatorGasOverhead: bigint;
        wrapperPremiumPercentage: bigint;
        keyHash: string;
        maxNumWords: bigint;
      }
    ],
    "view"
  >;

  lastRequestId: TypedContractMethod<[], [bigint], "view">;

  onTokenTransfer: TypedContractMethod<
    [_sender: AddressLike, _amount: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  s_callbacks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        callbackAddress: string;
        callbackGasLimit: bigint;
        requestGasPrice: bigint;
        requestWeiPerUnitLink: bigint;
        juelsPaid: bigint;
      }
    ],
    "view"
  >;

  s_configured: TypedContractMethod<[], [boolean], "view">;

  s_disabled: TypedContractMethod<[], [boolean], "view">;

  setConfig: TypedContractMethod<
    [
      _wrapperGasOverhead: BigNumberish,
      _coordinatorGasOverhead: BigNumberish,
      _wrapperPremiumPercentage: BigNumberish,
      _keyHash: BytesLike,
      _maxNumWords: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  typeAndVersion: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [_recipient: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COORDINATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LINK"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LINK_ETH_FEED"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SUBSCRIPTION_ID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateRequestPrice"
  ): TypedContractMethod<[_callbackGasLimit: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "disable"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enable"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "estimateRequestPrice"
  ): TypedContractMethod<
    [_callbackGasLimit: BigNumberish, _requestGasPriceWei: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, string, bigint] & {
        fallbackWeiPerUnitLink: bigint;
        stalenessSeconds: bigint;
        fulfillmentFlatFeeLinkPPM: bigint;
        wrapperGasOverhead: bigint;
        coordinatorGasOverhead: bigint;
        wrapperPremiumPercentage: bigint;
        keyHash: string;
        maxNumWords: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastRequestId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onTokenTransfer"
  ): TypedContractMethod<
    [_sender: AddressLike, _amount: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "s_callbacks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        callbackAddress: string;
        callbackGasLimit: bigint;
        requestGasPrice: bigint;
        requestWeiPerUnitLink: bigint;
        juelsPaid: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "s_configured"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "s_disabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "setConfig"
  ): TypedContractMethod<
    [
      _wrapperGasOverhead: BigNumberish,
      _coordinatorGasOverhead: BigNumberish,
      _wrapperPremiumPercentage: BigNumberish,
      _keyHash: BytesLike,
      _maxNumWords: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "typeAndVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_recipient: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "WrapperFulfillmentFailed"
  ): TypedContractEvent<
    WrapperFulfillmentFailedEvent.InputTuple,
    WrapperFulfillmentFailedEvent.OutputTuple,
    WrapperFulfillmentFailedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "WrapperFulfillmentFailed(uint256,address)": TypedContractEvent<
      WrapperFulfillmentFailedEvent.InputTuple,
      WrapperFulfillmentFailedEvent.OutputTuple,
      WrapperFulfillmentFailedEvent.OutputObject
    >;
    WrapperFulfillmentFailed: TypedContractEvent<
      WrapperFulfillmentFailedEvent.InputTuple,
      WrapperFulfillmentFailedEvent.OutputTuple,
      WrapperFulfillmentFailedEvent.OutputObject
    >;
  };
}
