/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Lottery, LotteryInterface } from "../../contracts/Lottery";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint64",
        name: "s_subId",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "s_vrfaddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "JoinPaly_Error",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "slottery_Error",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "Log",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "RequestFulfilled",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "Slottery",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
    ],
    name: "getRequestStatus",
    outputs: [
      {
        internalType: "bool",
        name: "fulfilled",
        type: "bool",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getwiner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "joinPlay",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "peopleTomoney",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "requestRandomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_requests",
    outputs: [
      {
        internalType: "bool",
        name: "fulfilled",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a06040527373511669fd4de447fed18bb79bafeac93ab7f31f600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc60001b6005556003600660006101000a81548161ffff021916908361ffff160217905550620f4240600660026101000a81548163ffffffff021916908363ffffffff16021790555060016006806101000a81548163ffffffff021916908363ffffffff160217905550348015620000f057600080fd5b50604051620011f3380380620011f383398181016040528101906200011691906200028f565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816006600a6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050620002d6565b600080fd5b600067ffffffffffffffff82169050919050565b6200020481620001e5565b81146200021057600080fd5b50565b6000815190506200022481620001f9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000257826200022a565b9050919050565b62000269816200024a565b81146200027557600080fd5b50565b60008151905062000289816200025e565b92915050565b60008060408385031215620002a957620002a8620001e0565b5b6000620002b98582860162000213565b9250506020620002cc8582860162000278565b9150509250929050565b608051610efa620002f96000396000818161021e01526102720152610efa6000f3fe6080604052600436106100895760003560e01c806388f13df01161005957806388f13df014610107578063a168fa8914610144578063d8a4676f14610182578063dcdcb147146101c0578063e0c86289146101eb57610090565b80626d6cae146100925780631fe543e3146100bd57806344a66268146100e657806375d55ab3146100fd57610090565b3661009057005b005b34801561009e57600080fd5b506100a7610216565b6040516100b49190610886565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df9190610a3a565b61021c565b005b3480156100f257600080fd5b506100fb6102dc565b005b61010561032a565b005b34801561011357600080fd5b5061012e60048036038101906101299190610af4565b61044f565b60405161013b9190610886565b60405180910390f35b34801561015057600080fd5b5061016b60048036038101906101669190610b21565b610467565b604051610179929190610b69565b60405180910390f35b34801561018e57600080fd5b506101a960048036038101906101a49190610b21565b6104a5565b6040516101b7929190610c50565b60405180910390f35b3480156101cc57600080fd5b506101d56105d0565b6040516101e29190610c8f565b60405180910390f35b3480156101f757600080fd5b506102006105fa565b60405161020d9190610886565b60405180910390f35b60085481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ce57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016102c5929190610caa565b60405180910390fd5b6102d88282610709565b5050565b67016345785d8a000060005411156102f8576102f66105fa565b505b6040517ff5671ea200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67016345785d8a0000341461036b576040517f27a5577300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f940f8524c5e5984c910d020c9c65918682bc7ed567dbc8d49277f0e787ee5f0033344260405161044593929190610cd3565b60405180910390a1565b60016020528060005260406000206000915090505481565b60096020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b600060606009600084815260200190815260200160002060000160019054906101000a900460ff1661050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050390610d67565b60405180910390fd5b6000600960008581526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff16151515158152602001600182018054806020026020016040519081016040528092919081815260200182805480156105b157602002820191906000526020600020905b81548152602001906001019080831161059d575b5050505050815250509050806000015181604001519250925050915091565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d306005546006600a9054906101000a900467ffffffffffffffff16600660009054906101000a900461ffff16600660029054906101000a900463ffffffff1660068054906101000a900463ffffffff166040518663ffffffff1660e01b81526004016106a9959493929190610dff565b602060405180830381600087803b1580156106c357600080fd5b505af11580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fb9190610e67565b600881905550600854905090565b6009600083815260200190815260200160002060000160019054906101000a900460ff1661076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076390610d67565b60405180910390fd5b60016009600084815260200190815260200160002060000160006101000a81548160ff021916908315150217905550806009600084815260200190815260200160002060010190805190602001906107c5929190610803565b507ffe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d82826040516107f7929190610e94565b60405180910390a15050565b82805482825590600052602060002090810192821561083f579160200282015b8281111561083e578251825591602001919060010190610823565b5b50905061084c9190610850565b5090565b5b80821115610869576000816000905550600101610851565b5090565b6000819050919050565b6108808161086d565b82525050565b600060208201905061089b6000830184610877565b92915050565b6000604051905090565b600080fd5b600080fd5b6108be8161086d565b81146108c957600080fd5b50565b6000813590506108db816108b5565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61092f826108e6565b810181811067ffffffffffffffff8211171561094e5761094d6108f7565b5b80604052505050565b60006109616108a1565b905061096d8282610926565b919050565b600067ffffffffffffffff82111561098d5761098c6108f7565b5b602082029050602081019050919050565b600080fd5b60006109b66109b184610972565b610957565b905080838252602082019050602084028301858111156109d9576109d861099e565b5b835b81811015610a0257806109ee88826108cc565b8452602084019350506020810190506109db565b5050509392505050565b600082601f830112610a2157610a206108e1565b5b8135610a318482602086016109a3565b91505092915050565b60008060408385031215610a5157610a506108ab565b5b6000610a5f858286016108cc565b925050602083013567ffffffffffffffff811115610a8057610a7f6108b0565b5b610a8c85828601610a0c565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac182610a96565b9050919050565b610ad181610ab6565b8114610adc57600080fd5b50565b600081359050610aee81610ac8565b92915050565b600060208284031215610b0a57610b096108ab565b5b6000610b1884828501610adf565b91505092915050565b600060208284031215610b3757610b366108ab565b5b6000610b45848285016108cc565b91505092915050565b60008115159050919050565b610b6381610b4e565b82525050565b6000604082019050610b7e6000830185610b5a565b610b8b6020830184610b5a565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610bc78161086d565b82525050565b6000610bd98383610bbe565b60208301905092915050565b6000602082019050919050565b6000610bfd82610b92565b610c078185610b9d565b9350610c1283610bae565b8060005b83811015610c43578151610c2a8882610bcd565b9750610c3583610be5565b925050600181019050610c16565b5085935050505092915050565b6000604082019050610c656000830185610b5a565b8181036020830152610c778184610bf2565b90509392505050565b610c8981610ab6565b82525050565b6000602082019050610ca46000830184610c80565b92915050565b6000604082019050610cbf6000830185610c80565b610ccc6020830184610c80565b9392505050565b6000606082019050610ce86000830186610c80565b610cf56020830185610877565b610d026040830184610877565b949350505050565b600082825260208201905092915050565b7f72657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b6000610d51601183610d0a565b9150610d5c82610d1b565b602082019050919050565b60006020820190508181036000830152610d8081610d44565b9050919050565b6000819050919050565b610d9a81610d87565b82525050565b600067ffffffffffffffff82169050919050565b610dbd81610da0565b82525050565b600061ffff82169050919050565b610dda81610dc3565b82525050565b600063ffffffff82169050919050565b610df981610de0565b82525050565b600060a082019050610e146000830188610d91565b610e216020830187610db4565b610e2e6040830186610dd1565b610e3b6060830185610df0565b610e486080830184610df0565b9695505050505050565b600081519050610e61816108b5565b92915050565b600060208284031215610e7d57610e7c6108ab565b5b6000610e8b84828501610e52565b91505092915050565b6000604082019050610ea96000830185610877565b8181036020830152610ebb8184610bf2565b9050939250505056fea264697066735822122030cdcbb9244406168f6f9528c169082788e94c0765ae3a8163c512eab30b679564736f6c63430008090033";

type LotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lottery__factory extends ContractFactory {
  constructor(...args: LotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    s_subId: BigNumberish,
    s_vrfaddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(s_subId, s_vrfaddress, overrides || {});
  }
  override deploy(
    s_subId: BigNumberish,
    s_vrfaddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(s_subId, s_vrfaddress, overrides || {}) as Promise<
      Lottery & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Lottery__factory {
    return super.connect(runner) as Lottery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new Interface(_abi) as LotteryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Lottery {
    return new Contract(address, _abi, runner) as unknown as Lottery;
  }
}
