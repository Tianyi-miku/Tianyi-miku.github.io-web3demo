/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LotteryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Slottery"
      | "getRequestStatus"
      | "getwiner"
      | "joinPlay"
      | "peopleTomoney"
      | "rawFulfillRandomWords"
      | "requestId"
      | "requestRandomWords"
      | "s_requests"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Log" | "RequestFulfilled"): EventFragment;

  encodeFunctionData(functionFragment: "Slottery", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRequestStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getwiner", values?: undefined): string;
  encodeFunctionData(functionFragment: "joinPlay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "peopleTomoney",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "requestId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestRandomWords",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_requests",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "Slottery", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequestStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getwiner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinPlay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "peopleTomoney",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requestId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_requests", data: BytesLike): Result;
}

export namespace LogEvent {
  export type InputTuple = [
    arg0: AddressLike,
    arg1: BigNumberish,
    arg2: BigNumberish
  ];
  export type OutputTuple = [arg0: string, arg1: bigint, arg2: bigint];
  export interface OutputObject {
    arg0: string;
    arg1: bigint;
    arg2: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFulfilledEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    randomWords: BigNumberish[]
  ];
  export type OutputTuple = [requestId: bigint, randomWords: bigint[]];
  export interface OutputObject {
    requestId: bigint;
    randomWords: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Lottery extends BaseContract {
  connect(runner?: ContractRunner | null): Lottery;
  waitForDeployment(): Promise<this>;

  interface: LotteryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Slottery: TypedContractMethod<[], [void], "nonpayable">;

  getRequestStatus: TypedContractMethod<
    [_requestId: BigNumberish],
    [[boolean, bigint[]] & { fulfilled: boolean; randomWords: bigint[] }],
    "view"
  >;

  getwiner: TypedContractMethod<[], [string], "view">;

  joinPlay: TypedContractMethod<[], [void], "payable">;

  peopleTomoney: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  requestId: TypedContractMethod<[], [bigint], "view">;

  requestRandomWords: TypedContractMethod<[], [bigint], "nonpayable">;

  s_requests: TypedContractMethod<
    [arg0: BigNumberish],
    [[boolean, boolean] & { fulfilled: boolean; exists: boolean }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "Slottery"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRequestStatus"
  ): TypedContractMethod<
    [_requestId: BigNumberish],
    [[boolean, bigint[]] & { fulfilled: boolean; randomWords: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getwiner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "joinPlay"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "peopleTomoney"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestRandomWords"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "s_requests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[boolean, boolean] & { fulfilled: boolean; exists: boolean }],
    "view"
  >;

  getEvent(
    key: "Log"
  ): TypedContractEvent<
    LogEvent.InputTuple,
    LogEvent.OutputTuple,
    LogEvent.OutputObject
  >;
  getEvent(
    key: "RequestFulfilled"
  ): TypedContractEvent<
    RequestFulfilledEvent.InputTuple,
    RequestFulfilledEvent.OutputTuple,
    RequestFulfilledEvent.OutputObject
  >;

  filters: {
    "Log(address,uint256,uint256)": TypedContractEvent<
      LogEvent.InputTuple,
      LogEvent.OutputTuple,
      LogEvent.OutputObject
    >;
    Log: TypedContractEvent<
      LogEvent.InputTuple,
      LogEvent.OutputTuple,
      LogEvent.OutputObject
    >;

    "RequestFulfilled(uint256,uint256[])": TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;
    RequestFulfilled: TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;
  };
}
